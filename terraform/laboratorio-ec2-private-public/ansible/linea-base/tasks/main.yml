---
- name: Update cache package
  changed_when: false
  ansible.builtin.package:
    update_cache: true

- name: Activar servicio firewalld
  when: ansible_os_family == "RedHat"
  ansible.builtin.service:
    name: firewalld
    state: started

- name: Deshabilitar servicio cockpit.socket
  when: ansible_os_family == "RedHat"
  ansible.builtin.service:
    name: cockpit.socket
    state: stopped
    enabled: false

- name: Captura de datos a nivel de firewalld cuando la zona es publica
  ansible.builtin.command:
    cmd: firewall-cmd --get-active-zones
  register: firewall_output
  changed_when: false

- name: Asignar valor a la zona
  ansible.builtin.set_fact:
    zone: "{{ firewall_output.stdout_lines[0] }}"

- name: Asignar interfaces a la zona
  ansible.builtin.set_fact:
    interfaces: "{{ firewall_output.stdout_lines[1].split(':')[1].strip().split() }}"

- name: set interfaces
  ansible.builtin.set_fact:
    eth0: "{{ interfaces[0] }}"
    eth1: "{{ interfaces[1] }}"
    eth2: "{{ interfaces[2] }}"

- name: Configurar nombre de host
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"

- name: Crear grupo en el host remoto
  ansible.builtin.group:
    name: "{{ item.group }}"
    state: present
  loop: "{{ user }}"

- name: Crear usuarios en el host remoto
  ansible.builtin.user:
    name: "{{ item.name }}"
    group: "{{ 'admin' if item.admin == true else 'operator' }}"
    comment: "{{ item.comment }}"
    create_home: true
    home: /home/{{ item.name }}
    groups: users
    update_password: on_create
  loop: "{{ user }}"

- name: Crear escritorio scripts en servidores remoto
  ansible.builtin.file:
    path: /scripts
    state: directory
    mode: "0755"
    owner: administrator
    group: admin

- name: Configurar llaves privadas
  ansible.posix.authorized_key:
    user: "{{ item.split('/')[-1].split('.')[0] }}"
    key: "{{ lookup('file', item) }}"
  with_fileglob:
    - files/*.pub
  loop_control:
    label: "{{ item.split('/')[-1].split('.')[0] }}"

- name: Asegurarse de que exista /etc/sudoers.d
  ansible.builtin.file:
    state: directory
    path: /etc/sudoers.d
    mode: "0755"
    owner: root
    group: root

- name: Configurar sudo para los usuarios administradores
  ansible.builtin.template:
    src: sudoadmin
    dest: /etc/sudoers.d/{{ item.name }}
    mode: "0640"
    validate: "/usr/sbin/visudo -cf %s"
    backup: true
  loop: "{{ user }}"
  loop_control:
    label: "{{ item.name }} - {{ item.comment }}"
  when: item.admin

- name: Configurar zona horaria a America/Lima
  community.general.timezone:
    name: America/Lima

- name: Denegar el root en el servidor de monitoreo
  ansible.builtin.replace:
    path: /etc/ssh/sshd_config
    regexp: "^#?(PermitRootLogin).*"
    replace: '\1 {{ "no" if ansible_hostname == "monitoreo" else "yes" }}'

- name: Enable zone
  ansible.posix.firewalld:
    zone: "{{ item }}"
    state: present
    permanent: true
  loop:
    - oym
    - servicio
    - backup

- name: Restart firewalld
  ansible.builtin.command:
    cmd: systemctl restart firewalld
  changed_when: false

- name: Create target to firewalld zone
  ansible.posix.firewalld:
    zone: "{{ item }}"
    state: present
    permanent: true
    target: DROP
  loop:
    - oym
    - servicio
    - backup

- name: Permitir redes de acceso
  ansible.posix.firewalld:
    zone: "{{ item.zone }}"
    port: "{{ item.port }}"
    permanent: true
    state: enabled
  loop:
    - { zone: "oym", port: "22/tcp" }
    - { zone: "servicio", port: "3000/tcp" }
    - { zone: "servicio", port: "9090/tcp" }
    - { zone: "servicio", port: "9093/tcp" }
    - { zone: "servicio", port: "9100/tcp" }
    - { zone: "backup", port: "5040/tcp" }

# - name: Remove interface zone from public
#  ansible.builtin.command:
#    cmd: firewall-cmd --zone="public" --remove-interface="{{ item }}" --permanent
#  register: firewall_remove_interface
#  changed_when: firewall_remove_interface.rc != 0
#  loop:
#    - "{{ eth0 }}"
#    - "{{ eth1 }}"
#    - "{{ eth2 }}"

# En caso de no aginar definir la zona por defecto y si cumple con todos los puertos bloequeados
- name: Set zone for interface
  ansible.builtin.command:
    cmd: firewall-cmd --zone="{{ item.zone }}" --change-interface="{{ item.interface }}" --permanent
  loop:
    - { zone: "oym", interface: "{{ eth0 }}" }
    - { zone: "servicio", interface: "{{ eth1 }}" }
    - { zone: "backup", interface: "{{ eth2 }}" }
  changed_when: false

- name: Restart firewalld
  ansible.builtin.command:
    cmd: systemctl restart firewalld
  changed_when: false

- name: Instalar Chrony
  ansible.builtin.package:
    name: chrony
    state: present

- name: Configurar el servidor NTP
  ansible.builtin.template:
    src: templates/chrony.conf.j2
    dest: /etc/chrony.conf
    mode: "0644"
  notify: restart_chrony

- name: Block de bastion
  when: inventory_hostname == "bastion"
  block:
    - name: Copia script de backup a servidor remoto
      ansible.builtin.template:
        src: backup.sh
        dest: /scripts/backup.sh
        mode: "0755"
        owner: administrator
        group: admin

    - name: Configurar cron para la ejecución del backup
      ansible.builtin.cron:
        name: "backup remoto"
        minute: 0
        hour: 0
        job: /scripts/./backup.sh

    - name: Download package remote
      ansible.builtin.get_url:
        url: "{{ url_node_export }}"
        mode: "0644"
        dest: /tmp/node_exporter.tar.gz
        owner: root
        group: root

    - name: Unarchive file remote
      ansible.builtin.unarchive:
        src: /tmp/node_exporter.tar.gz
        dest: /usr/local/bin/
        extra_opts: [--strip-components=1]
        owner: root
        group: root
        mode: "0755"
        remote_src: true
      register: unzip_output

    - name: Group add node_exporter
      ansible.builtin.group:
        name: node_exporter
        system: true
        state: present

    #   - name: Create user node_exporter
    #     ansible.builtin.user:
    #       name: node_exporter
    #       shell: /sbin/nologin
    #       system: true
    #       group: node_exporter

    - name: Create system service
      ansible.builtin.copy:
        content: |
          [Unit]
          Description=Node Exporter
          After=network.target

          [Service]
          User=root
          Group=root
          Type=simple
          ExecStart=/usr/local/bin/node_exporter

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/node_exporter.service
        mode: "0644"
        owner: root
        group: root

    - name: Start and Enable service
      ansible.builtin.systemd_service:
        daemon_reload: true
        name: node_exporter
        state: started
        enabled: true

- name: Block de monitoreo
  when: inventory_hostname == "monitoreo"
  block:
    - name: Configurar puerto para backup 5040
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        insertafter: '^#?Port\s+22$'
        line: "Port 5040"
        state: present

    - name: Permitir sshd escuche en el port 5040/tcp
      community.general.seport:
        ports: 5040
        proto: tcp
        setype: ssh_port_t
        state: present

    - name: Instalar docker en servidor de monitoreo
      ansible.builtin.yum_repository:
        name: docker-ce
        description: Docker Yum Repo
        baseurl: https://download.docker.com/linux/centos/$releasever/$basearch/stable
        gpgcheck: false
        enabled: true

    - name: Actualizar package cache
      changed_when: false
      ansible.builtin.package:
        update_cache: true

    - name: Instalar docker
      ansible.builtin.yum:
        name: "{{ item }}"
        state: present
      loop:
        - docker-ce

    - name: Activar servicio de docker
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: Añadir usuario administrator al grupo docker
      ansible.builtin.user:
        name: administrator
        groups: docker
        append: true

    - name: Instalar git en "{{ ansible_hostname }}"
      ansible.builtin.package:
        name: git
        state: present

    - name: Instalar Docker-Compose en servidor remoto
      ansible.builtin.get_url:
        url: "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: "0755"

    - name: Generar cadena aleatoria
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          date +%s | md5sum | awk '{ print $1 }' | tr '0123456789' '0lzeAsgtBa' | cut -c 1-12
      args:
        executable: /bin/bash
      register: random_name
      changed_when: random_name.rc != 0
      delegate_to: localhost

    - name: Clone remote repository
      ansible.builtin.git:
        repo: https://github.com/vegasbrianc/prometheus.git
        clone: true
        dest: /scripts/{{ random_name.stdout }}
        remote: master
        version: HEAD
